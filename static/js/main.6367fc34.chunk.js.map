{"version":3,"sources":["actions/index.js","containers/SearchBar.js","components/Chart.js","containers/WeatherList.js","App.js","serviceWorker.js","reducers/index.js","reducers/reducer_weather.js","index.js"],"names":["URL","fetchWeather","city","url","request","axios","get","console","log","type","payload","SearchBar","props","onInputChange","e","setState","term","target","value","onFormSubmit","preventDefault","state","className","onSubmit","this","placeholder","onChange","Component","connect","dispatch","bindActionCreators","height","width","data","color","_","round","sum","length","inits","WeatherList","renderWeather","cityData","temps","list","map","weather","main","temp","pressures","pressure","humidities","humidity","key","name","Chart","units","WeatherReducer","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","createStoreWithMiddleware","applyMiddleware","ReduxPromise","createStore","ReactDOM","render","store","reducers","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6367fc34.chunk.js","sourcesContent":["\nimport axios from 'axios'\n\nconst API_KEY = 'b02f149ed2b40a802f7d19d262b629a7';\nconst URL = `https://api.openweathermap.org/data/2.5/forecast?appid=${API_KEY}`\nexport const FETCH_WEATHER = 'FETCH_WEATHER'\n\nexport function fetchWeather(city) {\n  const url = `${URL}&q=${city},us`\n  const request = axios.get(url);\n  console.log(request)\n\n  return {\n    type: FETCH_WEATHER,\n    payload: request\n  }\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { fetchWeather } from '../actions/index'\n\nclass SearchBar extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      term: ''\n    }\n  }\n\n  onInputChange = (e) => {\n    this.setState({\n      term: e.target.value\n    })\n  }\n\n  onFormSubmit = (e) => {\n    e.preventDefault()\n    this.props.fetchWeather(this.state.term);\n    this.setState({\n      term: ''\n    })\n  }\n\n  render() {\n    return (\n      <form className=\"input-group my-4\" onSubmit={this.onFormSubmit}>\n        <input\n          placeholder=\"Search weather\"\n          className=\"form-control\"\n          value={this.state.term}\n          onChange={this.onInputChange}\n        />\n        <span className=\"input-group-btn\">\n          <button type=\"submit\" className=\"btn btn-secondary\">Submit</button>\n        </span>\n      </form>\n    )\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({ fetchWeather }, dispatch)\n}\n\nexport default connect(null, mapDispatchToProps)(SearchBar)\n","import _ from 'lodash'\nimport React  from 'react'\nimport { Sparklines, SparklinesLine, SparklinesReferenceLine } from 'react-sparklines'\n\nfunction average(data) {\n  return _.round(_.sum(data)/data.length)\n}\n\nexport default (props) => {\n  return(\n    <div>\n      <Sparklines height={120} width={180} data={props.data}>\n        <SparklinesLine color={props.color} />\n        <SparklinesReferenceLine type=\"avg\" />\n      </Sparklines>\n      <div>{average(props.data)} {props.inits}</div>\n    </div>\n  )\n}\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport Chart from '../components/Chart'\n// import GoogleMap from '../components/GoogleMap'\n\nclass WeatherList extends Component {\n  renderWeather = (cityData) => {\n    const temps = cityData.list.map(weather => weather.main.temp)\n    const pressures = cityData.list.map(weather => weather.main.pressure);\n    const humidities = cityData.list.map(weather => weather.main.humidity)\n    // const {lon, lat} =cityData.city.coord;\n    return (\n      <tr key={cityData.city.name}>\n        <td>{cityData.city.name}</td>\n        <td>\n          <Chart data={temps} color=\"orange\" units=\"K\" />\n        </td>\n        <td>\n          <Chart data={pressures} color=\"green\" units=\"hPa\" />\n        </td>\n        <td>\n          <Chart data={humidities} color=\"black\" units=\"%\" />\n        </td>\n      </tr>\n    )\n  }\n  render() {\n    return (\n      <div>\n        <table className=\"table table-hover\">\n          <thead>\n            <tr>\n              <th>City</th>\n              <th>Temperature (K)</th>\n              <th>Pressure (hPa)</th>\n              <th>Humidity (%)</th>\n            </tr>\n          </thead>\n          <tbody>\n            {this.props.weather.map(this.renderWeather)}\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps({ WeatherReducer }) {\n  return {\n  weather: WeatherReducer\n  }\n}\n\nexport default connect(mapStateToProps)(WeatherList)\n","import React, { Component } from 'react';\nimport SearchBar from './containers/SearchBar'\nimport WeatherList from './containers/WeatherList'\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <SearchBar />\n        <WeatherList />\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux'\nimport WeatherReducer from './reducer_weather'\n\nconst rootReducer = combineReducers({\n  WeatherReducer\n})\n\nexport default rootReducer\n","import { FETCH_WEATHER } from '../actions/index'\n\nexport default function(state = [], action) {\n  switch (action.type) {\n    case FETCH_WEATHER:\n      return [action.payload.data, ...state]\n  }\n  return state\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\nimport ReduxPromise from 'redux-promise'\nimport reducers from './reducers'\n\nconst createStoreWithMiddleware = applyMiddleware(ReduxPromise)(createStore)\n\nReactDOM.render(\n  <Provider store={createStoreWithMiddleware(reducers)}>\n    <App />\n  </Provider>,\ndocument.querySelector('#root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}